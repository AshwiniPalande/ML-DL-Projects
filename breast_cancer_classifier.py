# -*- coding: utf-8 -*-
"""Breast_Cancer_Classifier.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/10YLe-aGRv1G6Fq5_9YNhG3OFLkaL6Zgt
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import sklearn.datasets
from sklearn.model_selection import train_test_split

breast_cancer = sklearn.datasets.load_breast_cancer()

print(breast_cancer)

df=pd.DataFrame(breast_cancer.data,columns = breast_cancer.feature_names)

df.head()

df.tail()

df['label']=breast_cancer.target

df.head()

df.head()

df.describe()

#to understand the division of benign and malignant tumors
df['label'].value_counts()

df.groupby('label').mean()

# separating features and target
x=df.drop(columns='label',axis=1)
y=df['label']

print(x)

print(y)

# splitting the data into training and testing data
x_train,x_test, y_train, y_test = train_test_split(x,y,test_size=0.2, random_state = 2)

print(x.shape, x_train.shape, x_test.shape)

#standadize the data
from sklearn.preprocessing import StandardScaler
scaler=StandardScaler()
x_train_std = scaler.fit_transform(x_train)
x_test_std = scaler.transform(x_test)
print(x_train_std)

# Building the neural network
import tensorflow as tf
tf.random.set_seed(3)
from tensorflow import keras

cancer_model =keras.Sequential([
    keras.layers.Flatten(input_shape=(30,)),
    keras.layers.Dense(20,activation='relu'),
    keras.layers.Dense(2, activation='sigmoid')
])

cancer_model.compile(optimizer='adam',
                    loss = 'sparse_categorical_crossentropy',
                     metrics = ['accuracy'])

history = cancer_model.fit(x_train_std,y_train,validation_split=0.1,epochs=20)

plt.plot( history.history['accuracy'])
plt.plot( history.history['val_accuracy'])

plt.title('model accuracy')
plt.ylabel('accuracy')
plt.xlabel('epoch')

plt.legend(['training data','validation data'], loc ='lower right')

plt.plot( history.history['loss'])
plt.plot( history.history['val_loss'])

plt.title('model loss')
plt.ylabel('loss')
plt.xlabel('epoch')

plt.legend(['training data','validation data'], loc ='upper right')

loss,accuracy = cancer_model.evaluate(x_test_std, y_test)
print(accuracy)

print(x_test_std.shape)
print(x_test_std[0])

y_pred = cancer_model.predict(x_test_std)

print(y_pred.shape)
print(y_pred[0])

print(x_test_std)

print(y_pred)

y_pred_labels = [np.argmax(i) for i in y_pred]
print(y_pred_labels)

input_data =(20.57,17.77,132.9,1326,0.08474,0.07864,0.0869,0.07017,0.1812,0.05667,0.5435,0.7339,3.398,74.08,0.005225,0.01308,0.0186,0.0134,0.01389,0.003532,24.99,23.41,158.8,1956,0.1238,0.1866,0.2416,0.186,0.275,0.08902)
input_data_as_numpy_array = np.asarray(input_data)

input_data_reshaped = input_data_as_numpy_array.reshape(1,-1)

input_data_std = scaler.transform(input_data_reshaped)

prediction = cancer_model.predict(input_data_std)
print(prediction)

prediction_label = [np.argmax(prediction)]
print(prediction_label)

if(prediction_label[0] == 0):
  print("The tumor is Malignant")
else:
  print("The tumor is Benign")